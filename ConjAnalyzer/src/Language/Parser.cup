package Analizadores;

import java_cup.runtime.*;
import java.util.*;
import Conjuntos.ConjuntoManager;
import Arbol.*;
import Arbol.SimplificadorOperaciones;
import Componentes.SyntaxError;
import Interfaz.OutputManager;
import java.util.Stack;
import Interfaz.Inicio;
import javax.swing.SwingUtilities;

parser code {:
        private Inicio inicio; 
        private List<SyntaxError> syntaxErrors = new ArrayList<>();
        private OutputManager outputManager;
        private ConjuntoManager conjuntoManager;
        private SimplificadorOperaciones simplificador;
        private ArbolExpresion arbolExpresion;

            public Parser(AnalizadorLexico lexer, OutputManager outputManager, ConjuntoManager conjuntoManager, SimplificadorOperaciones simplificador, ArbolExpresion arbolExpresion, Inicio inicio) {
            super(lexer);
            this.outputManager = outputManager;
            this.conjuntoManager = conjuntoManager;
            this.simplificador = simplificador;
            this.arbolExpresion = arbolExpresion;
            this.inicio = inicio;  // Inicializar la variable de instancia
            this.init_actions();
        }

   public void syntax_error(Symbol s) {
        // Obtener los IDs de los tokens esperados
        List<Integer> expected = expected_token_ids();
        StringBuilder expectedTokens = new StringBuilder();
        for (int id : expected) {
            expectedTokens.append(symbol_name_from_id(id)).append(" ");
        }

        // Determinar el token inesperado
        String unexpectedToken = (s != null && s.value != null) ? s.value.toString() : "Símbolo Desconocido";

        // Construir el comentario con los tokens esperados
        String comentario = "Se esperaba uno de los siguientes tokens: " + expectedTokens.toString().trim() + ".";

        // Construir el mensaje para la salida de error
        String message = "Error de Sintaxis en línea " + s.left + ", columna " + s.right + ". " +
                         "Token inesperado: '" + unexpectedToken + "'. " + comentario;

        // Imprimir el mensaje en la consola de errores
        System.err.println(message);

        // Agregar el error a la lista con el nuevo comentario
        syntaxErrors.add(new SyntaxError(s.left, s.right, unexpectedToken, comentario));

        // Agregar mensaje de error al OutputManager
        outputManager.addErrorOutput(message);
    }

    public void unrecovered_syntax_error(Symbol s) {
        String message = "Unrecovered Syntax Error at line " + s.left + ", column " + s.right + ": " + s.value;
        outputManager.addErrorOutput(message);
        syntaxErrors.add(new SyntaxError(s.left, s.right, s.value, "Unrecovered Syntax Error")); 
    }

    public Set<Character> obtenerConjunto(String nombre) {
        Set<Character> conjunto = conjuntoManager.obtenerConjunto(nombre);
        if (conjunto == null) {
            String message = "Error: El conjunto '" + nombre + "' no está definido.";
            outputManager.addOutput(message);
            syntaxErrors.add(new SyntaxError(0, 0, nombre, "Conjunto No Definido"));
            return Collections.emptySet(); // Retornar conjunto vacío como medida de recuperación
        }
        return conjunto;
    }

    // Método para obtener la lista de errores sintácticos
    public List<SyntaxError> getSyntaxErrors() {
        return syntaxErrors;
    }

    public String symbol_name_from_id(int id) {
        switch(id) {
            case sym.PUNTOYCOMA: return "PUNTOYCOMA";
            case sym.DIFERENCIA: return "DIFERENCIA";
            case sym.DOSPUNTOS: return "DOSPUNTOS";
            case sym.CONJUNTO: return "CONJUNTO";
            case sym.HASTA: return "HASTA";
            case sym.INTERSECCION: return "INTERSECCION";
            case sym.FLECHA: return "FLECHA";
            case sym.OPERA: return "OPERA";
            case sym.ID: return "ID";
            case sym.COMA: return "COMA";
            case sym.EOF: return "EOF";
            case sym.CONJ: return "CONJ";
            case sym.PAR_IZQ: return "PAR_IZQ";
            case sym.UNION: return "UNION";
            case sym.error: return "error";
            case sym.PAR_DER: return "PAR_DER";
            case sym.COMPLEMENTO: return "COMPLEMENTO";
            case sym.LLAVE_IZQ: return "LLAVE_IZQ";
            case sym.EVALUAR: return "EVALUAR";
            case sym.LLAVE_DER: return "LLAVE_DER";
            case sym.ELEMENTOS_EVALUAR: return "ELEMENTOS_EVALUAR";
            default: return "Símbolo Desconocido";
        }
    }

   // Implementación de validate_expected_symbol para verificar si un ID de símbolo es válido
    protected boolean validate_expected_symbol(int id) {
        switch(id) {
            case sym.PUNTOYCOMA:
            case sym.DIFERENCIA:
            case sym.DOSPUNTOS:
            case sym.CONJUNTO:
            case sym.HASTA:
            case sym.INTERSECCION:
            case sym.FLECHA:
            case sym.ELEMENTOS_EVALUAR:
            case sym.OPERA:
            case sym.ID:
            case sym.COMA:
            case sym.EOF:
            case sym.CONJ:
            case sym.PAR_IZQ:
            case sym.UNION:
            case sym.error:
            case sym.PAR_DER:
            case sym.COMPLEMENTO:
            case sym.LLAVE_IZQ:
            case sym.EVALUAR:
            case sym.LLAVE_DER:
                return true;
            default:
                return false;
        }
    }

    // Método para obtener los IDs de los tokens esperados
    public List<Integer> expected_token_ids() {
        List<Integer> expectedTokens = new LinkedList<>();
        int state = ((Symbol) stack.peek()).parse_state;
        short[] actions = action_tab[state];

        for (int i = 0; i < actions.length; i += 2) {
            if (actions[i] != -1 && validate_expected_symbol(actions[i])) {
                expectedTokens.add((int) actions[i]);
            }
        }
        return expectedTokens;
    }

:}

// Terminales
terminal LLAVE_IZQ, LLAVE_DER, DOSPUNTOS, FLECHA, PUNTOYCOMA, 
         UNION, INTERSECCION, DIFERENCIA, COMPLEMENTO, 
         PAR_IZQ, PAR_DER, COMA, HASTA;
terminal String ID, CONJUNTO, ELEMENTOS_EVALUAR;

// Terminales para palabras reservadas
terminal CONJ, OPERA, EVALUAR;

non terminal Programa;
non terminal Sentencias;
non terminal Sentencia;
non terminal DefinicionConjunto;
non terminal DefinicionOperacion;
non terminal Nodo OperacionTokens;  
non terminal Evaluacion;
non terminal Set<Character> Conjunto;
non terminal Set<Character> Rango;

// El programa empieza con un bloque delimitado por llaves
start with Programa;

Programa ::= LLAVE_IZQ:llz Sentencias LLAVE_DER:llr
    {: 
    :}
;

Sentencias ::= Sentencia Sentencias
             | /* vacío */ 
             ;

Sentencia ::= DefinicionConjunto
            | DefinicionOperacion
            | Evaluacion
            | Conjunto
            | error:e PUNTOYCOMA
              {: 
                List<Integer> expected = expected_token_ids();
                StringBuilder expectedTokens = new StringBuilder();
                for (int id : expected) {
                    expectedTokens.append(symbol_name_from_id(id)).append(" ");
                }
              :}
            ;

/*
================================= CONJUNTOS ======================================================
*/
// Producción para definir un conjunto
DefinicionConjunto ::= CONJ:conj DOSPUNTOS:dosp ID:id FLECHA:flecha Conjunto:conjSet PUNTOYCOMA:punto
    {:
        conjuntoManager.definirConjunto(id, conjSet);
        System.out.println("Definido conjunto: " + id);
        System.out.println("Conjunto contenido: " + conjSet);
    :};

// Producción para manejar las diferentes notaciones de conjunto
Conjunto ::= Rango:rangos
    {:
        RESULT = rangos;
    :}
    | CONJUNTO:conjList
    {:
        RESULT = conjuntoManager.generarConjuntoDesdeLista(conjList);
        System.out.println("Generando conjunto desde lista: " + conjList);
        System.out.println("Conjunto generado: " + RESULT);
    :};

// Subproducción para manejar rangos
Rango ::= CONJUNTO:conj1 HASTA:hasta CONJUNTO:conj2
    {:
        RESULT = conjuntoManager.generarConjuntoDesdeRango(conj1, conj2);
        System.out.println("Generando conjunto desde rango: " + conj1 + " hasta " + conj2);
        System.out.println("Conjunto generado: " + RESULT);
    :};

/*
================================= OPERACIONES ======================================================
*/
DefinicionOperacion ::= OPERA:opera DOSPUNTOS:dosp ID:id FLECHA:flecha OperacionTokens:raiz PUNTOYCOMA:punto
{:
    {
    try {
        // Crear un nuevo árbol de expresión
        ArbolExpresion nuevoArbol = new ArbolExpresion();
        nuevoArbol.construir(raiz); // Construir el árbol a partir de la operación tokens

        // Simplificar el árbol y obtener el nodo raíz simplificado
        Nodo arbolSimplificado = simplificador.simplificar(nuevoArbol.getRaiz(), id);

        // Guardar el árbol simplificado en el objeto ArbolExpresion
        nuevoArbol.setRaizSimplificada(arbolSimplificado);

        // Evaluar el resultado de la operación simplificada
        Set<Character> resultado = arbolSimplificado.evaluar();

        // Guardar la operación simplificada en el ConjuntoManager
        conjuntoManager.guardarOperacion(id, arbolSimplificado.mostrarContenido(), resultado);

        // Agregar el árbol a la lista en 'Inicio'
        inicio.arbolesExpresion.add(nuevoArbol);

        // Imprimir información adicional para depuración
        System.out.println("Operación '" + id + "' simplificada y guardada.");
        System.out.println("Árbol de operación simplificada: " + arbolSimplificado);
        System.out.println("Resultado de la operación: " + resultado);
        System.out.println("------------------------------------");
        System.out.println(conjuntoManager.getOperaciones());
    } catch (Exception e) {
        String message = "Error al definir operación '" + id + "': " + e.getMessage();
        System.err.println(message);
        outputManager.addErrorOutput(message);
        syntaxErrors.add(new SyntaxError(operaleft, puntoright, e.getMessage(), "Error en la Definición de Operación"));
    }
}
:};

OperacionTokens ::= DIFERENCIA:dif OperacionTokens:op1 OperacionTokens:op2
{:
    // Crear un nodo binario para la operación de diferencia
    Nodo nodo = new NodoBinario("-", op1, op2);
    RESULT = nodo; // Asignar el nodo creado al resultado de la producción
    System.out.println("Nodo de diferencia creado: " + nodo);
:}
| UNION:union OperacionTokens:op1 OperacionTokens:op2
{:
    // Crear un nodo binario para la operación de unión
    Nodo nodo = new NodoBinario("U", op1, op2);
    RESULT = nodo;
    System.out.println("Nodo de unión creado: " + nodo);
:}
| INTERSECCION:inter OperacionTokens:op1 OperacionTokens:op2
{:
    // Crear un nodo binario para la operación de intersección
    Nodo nodo = new NodoBinario("&", op1, op2);
    RESULT = nodo;
    System.out.println("Nodo de intersección creado: " + nodo);
:}
| COMPLEMENTO:compl OperacionTokens:op
{:
    // Crear un nodo unario para la operación de complemento
    Nodo nodo = new NodoUnario("^", op);
    RESULT = nodo;
    System.out.println("Nodo de complemento creado: " + nodo);
:}
| LLAVE_IZQ ID:id LLAVE_DER
{:
    // Crear un nodo de conjunto para el identificador de conjunto
    Nodo nodo = new NodoConjunto(id, conjuntoManager);
    RESULT = nodo;
    System.out.println("Nodo de conjunto creado: " + nodo);
:};

/*
================================= EVALUACION ======================================================
*/
// Evaluación de tokens
Evaluacion ::= EVALUAR PAR_IZQ  ELEMENTOS_EVALUAR: elementos COMA ID:id PAR_DER PUNTOYCOMA:punto
{:
    // Extraer los elementos de ELEMENTOS_EVALUAR (vienen en la forma "{a, b, c}")
    String elementosStr = elementos;
    elementosStr = elementosStr.substring(1, elementosStr.length() - 1); 
    String[] elementosArray = elementosStr.split(",\\s*"); 
    Set<Character> resultadoOperacion = conjuntoManager.obtenerResultadoOperacion(id);
    // Verificar si la operación existe
    if (resultadoOperacion == null) {
        System.err.println("Operación no encontrada: " + id);
        outputManager.addErrorOutput("Operación no encontrada: " + id);
        syntaxErrors.add(new SyntaxError(elementosleft, idright, "Operación no encontrada: " + id, "Error en la Evaluación"));
    }
    // Evaluar cada elemento contra la operación
    outputManager.addOutput("===============");
    outputManager.addOutput("Evaluar: " + id);
    outputManager.addOutput("===============");

    for (String elemento : elementosArray) {
        elemento = elemento.trim();  // Remueve cualquier espacio alrededor del elemento
        if (resultadoOperacion.contains(elemento.charAt(0))) {
            outputManager.addOutput(elemento + " -> exitoso");
        } else {
            outputManager.addOutput(elemento + " -> fallo");
        }
    }
    outputManager.addOutput("===============");
:};


