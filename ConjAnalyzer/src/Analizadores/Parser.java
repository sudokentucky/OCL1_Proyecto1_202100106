
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.*;
import Conjuntos.ConjuntoManager;
import Arbol.*;
import Arbol.SimplificadorOperaciones;
import Componentes.SyntaxError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\010\000\002\011\005\000" +
    "\002\011\005\000\002\011\003\000\002\006\010\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\004\000\002\007\005\000\002\010\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\004\004\005\001\002\000\004\002\065\001" +
    "\002\000\012\005\ufffe\023\010\024\006\025\007\001\002" +
    "\000\004\006\042\001\002\000\004\015\032\001\002\000" +
    "\004\006\020\001\002\000\012\005\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\001\002\000\012\005\ufffd\023\ufffd\024\ufffd\025" +
    "\ufffd\001\002\000\012\005\ufffe\023\010\024\006\025\007" +
    "\001\002\000\004\005\016\001\002\000\012\005\ufffc\023" +
    "\ufffc\024\ufffc\025\ufffc\001\002\000\004\002\000\001\002" +
    "\000\004\005\uffff\001\002\000\004\021\021\001\002\000" +
    "\004\007\022\001\002\000\004\022\024\001\002\000\004" +
    "\010\031\001\002\000\012\005\ufff7\010\ufff7\017\025\020" +
    "\026\001\002\000\004\022\024\001\002\000\004\022\027" +
    "\001\002\000\006\005\ufff9\010\ufff9\001\002\000\006\005" +
    "\ufff8\010\ufff8\001\002\000\012\005\ufffa\023\ufffa\024\ufffa" +
    "\025\ufffa\001\002\000\004\004\033\001\002\000\004\022" +
    "\024\001\002\000\004\005\035\001\002\000\004\017\036" +
    "\001\002\000\004\021\037\001\002\000\004\016\040\001" +
    "\002\000\004\010\041\001\002\000\012\005\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\001\002\000\004\021\043\001\002\000" +
    "\004\007\044\001\002\000\014\004\051\011\050\012\046" +
    "\013\047\014\052\001\002\000\004\010\064\001\002\000" +
    "\014\004\051\011\050\012\046\013\047\014\052\001\002" +
    "\000\014\004\051\011\050\012\046\013\047\014\052\001" +
    "\002\000\014\004\051\011\050\012\046\013\047\014\052" +
    "\001\002\000\004\021\054\001\002\000\014\004\051\011" +
    "\050\012\046\013\047\014\052\001\002\000\016\004\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\001\002\000" +
    "\004\005\055\001\002\000\016\004\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\001\002\000\014\004\051\011" +
    "\050\012\046\013\047\014\052\001\002\000\016\004\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\001\002\000" +
    "\014\004\051\011\050\012\046\013\047\014\052\001\002" +
    "\000\016\004\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\001\002\000\014\004\051\011\050\012\046\013\047" +
    "\014\052\001\002\000\016\004\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\001\002\000\012\005\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\013\004\012\005\011\006\014\010\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\016\004\012" +
    "\005\011\006\014\010\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\044\001\001\000" +
    "\002\001\001\000\004\007\061\001\001\000\004\007\057" +
    "\001\001\000\004\007\055\001\001\000\002\001\001\000" +
    "\004\007\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\056\001\001\000\002\001" +
    "\001\000\004\007\060\001\001\000\002\001\001\000\004" +
    "\007\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private int errorCount = 0;
    private List<SyntaxError> syntaxErrors = new ArrayList<>(); // Lista para almacenar errores sintácticos

    ConjuntoManager conjuntoManager = new ConjuntoManager();
    SimplificadorOperaciones simplificador = new SimplificadorOperaciones(conjuntoManager);
    ArbolBuilder arbolBuilder = new ArbolBuilder(conjuntoManager);  // Crear el ArbolBuilder aquí

    public void syntax_error(Symbol s) {
        String message = "Syntax Error in Line " + s.left + " Column " + s.right + ". Unexpected: " + s.value;
        System.err.println(message);
        errorCount++;
        syntaxErrors.add(new SyntaxError(s.left, s.right, s.value, "Syntax Error")); // Agregar a la lista de errores
    }

    public void report_fatal_error(String message, Object info) {
        Symbol s = (Symbol) info;
        message = "Fatal Error: " + message + " at line " + s.left + ", column " + s.right;
        System.err.println(message);
        throw new RuntimeException(message);
    }

    public int getErrorCount() {
        return errorCount;
    }

    public void unrecovered_syntax_error(Symbol s) throws Exception {
        String message = "Unrecovered Syntax Error at line " + s.left + ", column " + s.right + ": " + s.value;
        System.err.println(message);
        syntaxErrors.add(new SyntaxError(s.left, s.right, s.value, "Unrecovered Syntax Error")); // Agregar a la lista de errores
        throw new Exception(message);
    }

    public Set<Character> obtenerConjunto(String nombre) {
        Set<Character> conjunto = conjuntoManager.obtenerConjunto(nombre);
        if (conjunto == null) {
            throw new RuntimeException("El conjunto " + nombre + " no está definido.");
        }
        return conjunto;
    }

    // Método para obtener la lista de errores sintácticos
    public List<SyntaxError> getSyntaxErrors() {
        return syntaxErrors;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= LLAVE_IZQ Sentencias LLAVE_DER 
            {
              Object RESULT =null;
		int llzleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int llzright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object llz = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int llrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object llr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        System.out.println("Token: " + llz);
        System.out.println("Token: " + llr);
        System.out.println("Regla: Programa ::= LLAVE_IZQ Sentencias LLAVE_DER"); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Sentencias ::= Sentencia Sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencias",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Sentencias ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencias",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sentencia ::= DefinicionConjunto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= DefinicionOperacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Sentencia ::= Evaluacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DefinicionConjunto ::= CONJ DOSPUNTOS ID FLECHA Conjunto PUNTOYCOMA 
            {
              Object RESULT =null;
		int conjleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int conjright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object conj = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dospleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dospright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object dosp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int flechaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int flecharight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object flecha = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int conjSetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int conjSetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Set<Character> conjSet = (Set<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int puntoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int puntoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object punto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        conjuntoManager.definirConjunto(id, conjSet);
        System.out.println("Definido conjunto: " + id);
        System.out.println("Conjunto contenido: " + conjSet);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinicionConjunto",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Conjunto ::= CONJUNTO HASTA CONJUNTO 
            {
              Set<Character> RESULT =null;
		int conj1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int conj1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String conj1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object hasta = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int conj2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conj2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String conj2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        RESULT = conjuntoManager.generarConjuntoDesdeRango(conj1, conj2);
        System.out.println("Generando conjunto desde rango: " + conj1 + " hasta " + conj2);
        System.out.println("Conjunto generado: " + RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conjunto",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Conjunto ::= CONJUNTO COMA Conjunto 
            {
              Set<Character> RESULT =null;
		int conj1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int conj1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String conj1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Set<Character> resto = (Set<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        Set<Character> conjunto = new HashSet<>();
        conjunto.add(conj1.charAt(0));  // Añadir el primer elemento
        conjunto.addAll(resto);  // Añadir el resto de los elementos
        RESULT = conjunto;
        System.out.println("Generando conjunto desde lista: " + conj1 + ", " + resto);
        System.out.println("Conjunto generado: " + RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conjunto",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Conjunto ::= CONJUNTO 
            {
              Set<Character> RESULT =null;
		int conj1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conj1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String conj1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        Set<Character> conjunto = new HashSet<>();
        conjunto.add(conj1.charAt(0));
        RESULT = conjunto;
        System.out.println("Generando conjunto desde un solo elemento: " + conj1);
        System.out.println("Conjunto generado: " + RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conjunto",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DefinicionOperacion ::= OPERA DOSPUNTOS ID FLECHA OperacionTokens PUNTOYCOMA 
            {
              Object RESULT =null;
		int operaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int operaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object opera = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dospleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dospright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object dosp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int flechaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int flecharight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object flecha = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tokensleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tokensright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> tokens = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int puntoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int puntoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object punto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Nodo arbol = arbolBuilder.construirArbol(tokens);
    Set<Character> resultado = arbol.evaluar();
    conjuntoManager.guardarOperacion(id, arbol.mostrarContenido(), resultado);
    System.out.println("Operación '" + id + "' simplificada y guardada.");
    System.out.println("Árbol de operación simplificada: " + arbol);
    System.out.println("Resultado de la operación: " + resultado);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinicionOperacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OperacionTokens ::= DIFERENCIA OperacionTokens OperacionTokens 
            {
              List<String> RESULT =null;
		int difleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int difright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dif = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> op1 = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> op2 = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    List<String> tokens = new ArrayList<>(op1);
    tokens.addAll(op2);
    tokens.add("-");
    RESULT = tokens;
    System.out.println("Token de diferencia añadido: " + tokens);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionTokens",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OperacionTokens ::= UNION OperacionTokens OperacionTokens 
            {
              List<String> RESULT =null;
		int unionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int unionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object union = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> op1 = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> op2 = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    List<String> tokens = new ArrayList<>(op1);
    tokens.addAll(op2);
    tokens.add("U");
    RESULT = tokens;
    System.out.println("Token de unión añadido: " + tokens);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionTokens",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OperacionTokens ::= INTERSECCION OperacionTokens OperacionTokens 
            {
              List<String> RESULT =null;
		int interleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int interright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object inter = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> op1 = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> op2 = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    List<String> tokens = new ArrayList<>(op1);
    tokens.addAll(op2);
    tokens.add("&");
    RESULT = tokens;
    System.out.println("Token de intersección añadido: " + tokens);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionTokens",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OperacionTokens ::= COMPLEMENTO OperacionTokens 
            {
              List<String> RESULT =null;
		int complleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int complright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object compl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> op = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    List<String> tokens = new ArrayList<>(op);
    tokens.add("^");
    RESULT = tokens;
    System.out.println("Token de complemento añadido: " + tokens);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionTokens",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OperacionTokens ::= LLAVE_IZQ ID LLAVE_DER 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    List<String> tokens = new ArrayList<>();
    tokens.add(id);
    RESULT = tokens;
    System.out.println("Identificador de conjunto añadido: " + tokens);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionTokens",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Evaluacion ::= EVALUAR PAR_IZQ LLAVE_IZQ Conjunto LLAVE_DER COMA ID PAR_DER PUNTOYCOMA 
            {
              Object RESULT =null;
		int conjSetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int conjSetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Set<Character> conjSet = (Set<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int puntoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int puntoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object punto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Set<Character> resultadoOperacion = conjuntoManager.obtenerResultadoOperacion(id);

        if (resultadoOperacion != null) {
            System.out.println("===============\nEvaluar: " + id + "\n===============");
            System.out.println("Conjunto a evaluar: " + conjSet);
            System.out.println("Resultado de la operación '" + id + "': " + resultadoOperacion);
            for (Character elemento : conjSet) {
                if (resultadoOperacion.contains(elemento)) {
                    System.out.println(elemento + " -> exitoso");
                } else {
                    System.out.println(elemento + " -> fallo");
                }
            }
        } else {
            System.err.println("Error: La operación '" + id + "' no está definida.");
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Evaluacion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
